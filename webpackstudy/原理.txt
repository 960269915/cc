一、webpack理解
1、所有的资源，css、js、img、less、json等都会被作为模块处理。比如写vue，会在一个页面里面写js,引入的图片，less等。那么webpack如何去处理呢？
2、首先要告诉webpakc一个入口文件，比如index.js,webpakc会以入口文件为起点开始打包。webpack会根据引入的资源(jq等)形成一个关系图
3、引进来以后，会形成chunk（代码块），再对代码块进行处理，比如将Less编译成css，js编译成浏览器能识别的js，这个操作就叫做打包
4、打包好的资源再输出出去，叫bundle

二、webpack的核心概念
1、entry  入口文件   指示webpack以哪个文件为入口起点开始打包  分析构建内部依赖图
2、output 输出 打包后的资源(bundle) 输入到哪里，以及如何命名
3、loader 处理非js文件，因为webpack只认识js（理解为翻译非js资源）
4、plugins  执行更多的任务，比如压缩代码等（或者说执行loader不能完成的任务）
5、mode 模式 开发环境和生成环境



三、搭建
先初始化  npm  init 生成package.json
安装  npm i webpack  webpack-cli -g     -save-dev(开发环境) -save(发布环境)  -g （安装在全局）

-------------------------------开发环境
1、打包css 
下载 style-loader css-loader loader里面use 如需要打包less，则再使用less-loader

2、处理html 
使用html-webpack-plugin 默认创建index.html 并引入打包出来的Js

3、处理图片 
使用url-loader 处理css中引入的图片   使用html-loader 处理image标签中的图片

4、处理其他资源（如字体，字体图标）
使用file-loader file-loader 也可以直接处理图片 url-loader是基于file-loader,只是多了图片转base64等


-------------------------------正式环境
1、提取css文件为单独的
下载 mini-css-extract-plugin 当分离css时，使用MiniCssExtractPlugin.loader，并且去除style-loader(因为使用单独的文件，不需要再放入js中)

2、处理css兼容性
postcss-loader postcss-preset-env  postcss-preset-env的作用是帮助postcss找到package.json里面的browserslist配置项
"browserslist":{
"development":[
    "last 1 chrome version" //兼容最近一个版本的谷歌浏览器
],
"production":[
    ">0.2%",//大于市场份额0.2的
    "not dead",//不兼容已死亡的浏览器
]
}

3、压缩css
下载 optimize-css-assets-webpack-plugin

4、js语法检查
下载 eslint eslint-loader eslint-config-airbnb-base eslint-plugin-import eslint-import-resolver-node
"extends":"airbnb-base" 去继承这个库的规则   配置在package.json里面的eslintConfig


15


