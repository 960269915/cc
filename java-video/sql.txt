====================查询
SELECT * FROM <表名>
SELECT * FROM <表名> WHERE <条件表达式>
SELECT id, score, name FROM students; 只返回指定的列
---条件符号
AND OR

---查询表达式
使用=判断相等	score = 80	name = 'abc'	字符串需要用单引号括起来
使用>判断大于	score > 80	name > 'abc'	字符串比较根据ASCII码，中文字符比较根据数据库设置
使用>=判断大于或相等	score >= 80	name >= 'abc'
使用<判断小于	score < 80	name <= 'abc'
使用<=判断小于或相等	score <= 80	name <= 'abc'
使用<>判断不相等	score <> 80	name <> 'abc'
使用LIKE判断相似	name LIKE 'ab%'	name LIKE '%bc%'	%表示任意字符，例如'ab%'将匹配'ab'，'abc'，'abcd'

====================排序
ORDER BY score //正序
ORDER BY score DESC //倒叙

====================分页查询
LIMIT 每页多少条，OFFSET偏移量
LIMIT总是设定为pageSize；
OFFSET计算公式为pageSize * (pageIndex - 1)
SELECT * FROM students LIMIT 3 OFFSET 0;

====================聚合查询
---函数	说明
SUM	计算某一列的合计值，该列必须为数值类型
AVG	计算某一列的平均值，该列必须为数值类型
MAX	计算某一列的最大值
MIN	计算某一列的最小值
num 为查询结果别名

SELECT COUNT(*) num FROM students;

---分组聚合
SELECT class_id, COUNT(*) num FROM students GROUP BY class_id //根据班级id聚合

====================多表联查
先确定主表，仍然使用FROM <表1>的语法；
再确定需要连接的表，使用INNER JOIN <表2>的语法；
然后确定连接条件，使用ON <条件...>，这里的条件是s.class_id = c.id，表示students表的class_id列与classes表的id列相同的行需要连接；
可选：加上WHERE子句、ORDER BY等子句

INNER JOIN是选出两张表都存在的记录
LEFT OUTER JOIN是选出左表存在的记录
RIGHT OUTER JOIN是选出右表存在的记录

SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score
FROM students s
INNER JOIN classes c
ON s.class_id = c.id;

====================修改数据
---插入
INSERT INTO <表名> (字段1, 字段2, ...) VALUES (值1, 值2, ...);
---修改
UPDATE <表名> SET 字段1=值1, 字段2=值2, ... WHERE ...;
---删除
DELETE FROM <表名> WHERE ...;

====================实用SQL语句
---REPLACE 记录已经存在，就先删除原记录，再插入新记录，不存在就插入
REPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99);

---插入或更新，如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录
INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99) ON DUPLICATE KEY UPDATE name='小明', gender='F', score=99;

---插入或忽略，如果记录已经存在，就啥事也不干直接忽略
INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99);

---快照
CREATE TABLE students_of_class1 SELECT * FROM students WHERE class_id=1;

---写入查询结果集
INSERT INTO statistics (class_id, average) SELECT class_id, AVG(score) FROM students GROUP BY class_id;

---强制使用指定索引，idx_class_id必须存在
SELECT * FROM students FORCE INDEX (idx_class_id) WHERE class_id = 1 ORDER BY id DESC;

====================事务
BEGIN //开启事务
UPDATE accounts SET balance = balance - 100 WHERE id = 1;
-- 第二步：将id=2的B账户余额加上100
UPDATE accounts SET balance = balance + 100 WHERE id = 2;
COMMIT //提交事务
ROLLBACK //回滚事务

