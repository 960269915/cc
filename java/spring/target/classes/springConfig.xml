<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    注册bean-->
<!--    bean 参数-->
<!--    1、name或者id是唯一的标识，两者只需要配置一个即可-->
<!--    2、scope 默认是单列模式，prototype为非单例 -->
<!--    3、init-method 初始方法的调用，destroy-method销毁方法的调用-->
<!--    4、depends-on 等待某个类先执行-->
    <bean name="student" class="com.spring.xmlType.bean.Student" init-method="init" depends-on="person" destroy-method="destory" autowire="byType">
<!--        Bena默认调无参构造，此处是有参构造的情况-->
        <constructor-arg name="age" value="18"></constructor-arg>
<!--        property 给对象默认赋值，对象属性必须要有默认的set方法 name为字段名称 value为值 ref是当属性引用另一个bean（引用类型也要注册）-->
        <property name="name" value="小明"></property>
<!--        当属性是引用类型(可使用autowire自动注入)-->
<!--        <property name="p" ref="person"></property>-->
<!--        当属性是list-->
        <property name="list">
            <list>
                <value>小明</value>
                <value>小红</value>
            </list>
        </property>
        <!--当属性是map-->
        <property name="score">
            <map>
                <entry key="语文" value="100"></entry>
                <entry key="数学" value="100"></entry>
            </map>
        </property>
    </bean>
    <bean name="person" class="com.spring.xmlType.bean.Person"></bean>
    <bean name="AopTest" class="com.spring.xmlType.aop.AopTest"></bean>


<!--    配置aop操作-->
    <aop:config>
<!--        切入哪个类的哪个方法-->
        <aop:pointcut id="aoptest" expression="execution(* com.spring.xmlType.bean.Student.say(String))"/>
<!--        定义切入的动作-->
        <aop:aspect ref="AopTest">
<!--            before 之前-->
            <aop:before method="beforeSay" pointcut-ref="aoptest"></aop:before>
<!--            之后-->
            <aop:after method="afterSay" pointcut-ref="aoptest"></aop:after>
<!--            around 环绕，完全代理-->
            <aop:around method="around" pointcut-ref="aoptest"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>